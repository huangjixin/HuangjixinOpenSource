<?xml version="1.0" encoding="utf-8"?>
<skin:NodeSkinBase xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:skin="com.hjx.graphic.skin.*" xmlns:primatives="ws.tink.spark.primatives.*" xmlns:graphics="ws.tink.spark.graphics.*">
	<fx:Declarations>
		<s:AnimateColor id="activeEffect"
						targets="{[animatePath.stroke]}"
						colorPropertyName="color"
						colorFrom="0"
						colorTo="red"
						repeatBehavior="reverse"
						repeatCount="0"
						duration="500" />
		<s:AnimateColor id="doneEffect"
						targets="{[path.stroke]}"
						colorPropertyName="color"
						colorTo="green"
						repeatBehavior="reverse"
						duration="100" />
	</fx:Declarations>
	<fx:Metadata>
		[HostComponent("com.hjx.bpmn.graphic.Association")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				var cr:Number = getStyle("strokeColor");
				if (strokeColor != cr)strokeColor = cr;
				
				var sw:Number = getStyle("strokeWidth");
				if (strokeWidth != sw) strokeWidth = sw;      
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				hostComponent.addEventListener("monitoringStatusChange",onmonitoringStatusChange);
			}
			
			[Bindable]
			public var strokeColor:uint = 0;
			
			[Bindable]
			public var strokeWidth:Number = 1;
			
			protected function onmonitoringStatusChange(event:Event):void
			{
				if(hostComponent.monitoringStatus == "active"){
					activeEffect.play();
					doneEffect.stop();
					path.visible= false;
					animatePath.visible = !path.visible;
					animatePath.data = path.data;
				}else if(hostComponent.monitoringStatus == "done"){
					doneEffect.play();
					activeEffect.stop();
					path.visible= true;
					animatePath.visible = !path.visible;
					animatePath.data = path.data;
				}else{
					activeEffect.stop();
					doneEffect.stop();
					path.visible= true;
					animatePath.visible = !path.visible;
				}
			}
			
		]]>
	</fx:Script>
	<skin:states>
		<s:State name="normal"/>
		<s:State name="normalAndShowsCaret"/>
		<s:State name="selected"/>
		<s:State name="selectedAndShowsCaret"/>
		<s:State name="active"/>
		<s:State name="done"/>
	</skin:states>
	<fx:Declarations>
		<s:SolidColorStroke id="strokecolor" caps="none" color="{strokeColor}"
							 weight="{strokeWidth}"/>
		<s:SolidColor id="fillcolor" color="{strokeColor}"/>
	</fx:Declarations>
	
	<s:Group id="base" includeInLayout="false">  
		<!--<s:filters>
		<s:GlowFilter includeIn="ShowsCaret" color="{caretColor}" alpha="0.8" blurX="8" blurY="8">
		</s:GlowFilter>
		</s:filters>-->    
		<primatives:Path id="path" data="M 0 0 L 0 0" stroke="{strokecolor}">
			
		</primatives:Path>  
		<primatives:Path id="animatePath" visible="false">
			<primatives:stroke>
				<graphics:SolidColorDash caps="none" color="{strokeColor}"
										 weight="{strokeWidth}" dash="8" gap="8"/>
			</primatives:stroke>
		</primatives:Path>  
		<s:Path id="startArrow" data="M -10 -5 l 10 5 l -10 5 Z" fill="{fillcolor}">
		</s:Path>
		<!-- data path must be relative to (0,0) because arrow are centered on path end/start points-->
		<s:Path id="endArrow" data="M -10 -5 l 10 5 l -10 5 Z" fill="{fillcolor}">
		</s:Path>     
	</s:Group>
</skin:NodeSkinBase>
