<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:components="components.*"
				width="100%" height="100%" layout="vertical" styleName="samplePaddingStyle">
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import model.ApplicationModel;
			import mx.utils.UIDUtil;
			
			private var camera:Camera;
			private var mic:Microphone;
			private var nc:NetConnection;
			private var ns:NetStream;
			private var recordingTimer:Timer;	
			
			private var userUID:String = UIDUtil.createUID();
			
			private function doStartRecording() : void
			{
				//A NetConnection is the pipe between Flex/Air and Flash Media Server
				nc = new NetConnection();
				
				//The NetConnection has a client property to refer to an object or class 
				//which you assign all of the server callbacks to.
				nc.addEventListener(NetStatusEvent.NET_STATUS, handlerNetStatus);
				
				//Connect to the location of your flash media server for example:
				//nc.connect("rtmp://fmsexamples.adobe.com/applicationName/instance");
				nc.connect("rtmp://localhost/RecordStream/"+userUID);
			}
			
			/**
			 * 	This is the handler function of the NetStatusEvent for the NetConnection.  
			 * 	Here is where we can find out the connection status and execute actions 
			 * 	based on each result. 
			 */
			private function handlerNetStatus(event:NetStatusEvent) : void 
			{
				var info:Object = event.info;
				
				//Checking the event.info.code for the current NetConnection status string	
				switch(info.code) 
				{
					//code == NetConnection.Connect.Success when Netconnection has successfully
					//connected
					case "NetConnection.Connect.Success":	
						if ( doNetStream() )
						{
							btnStart.enabled = false;
							btnEnd.enabled = true;
							btnPlay.enabled = false;
							
							tracePanel.writeln( "Connection Successful" );
							tracePanel.writeln( "Recording Started" );
						}
						break;
					
					//code == NetConnection.Connect.Rejected when Netconnection did
					//not have permission to access the application.		
					case "NetConnection.Connect.Rejected":
						tracePanel.writeln( "Connection Rejected" );	
						break;
					
					//code == NetConnection.Connect.Failed when Netconnection has failed to connect
					//either because your network connection is down or the server address doesn't exist.
					case "NetConnection.Connect.Failed":
						tracePanel.writeln( "Connection Failed" );	
						break;
					
					//code == NetConnection.Connect.Closed when Netconnection has been closed successfully.	
					case "NetConnection.Connect.Closed":
						tracePanel.writeln( "Connection Closed" );	
						break;
				}
			}
			
			private function doNetStream() : Boolean
			{
				ns = new NetStream(nc);
				ns.client = new Object();
				
				//check and make sure that we have a camera
				camera = Camera.getCamera();
				if ( camera == null )
				{
					if ( Camera.names.length > 0 )
					{
						Alert.show( 'The default camera is in use by another application.', 'Error' );
						tracePanel.writeln( 'The default camera is in use by another application.' );
					}
					else
					{
						Alert.show( 'Please install a webcam to use this sample.', 'Error' );
						tracePanel.writeln( 'There is no camera installed on your system.' );
					}
				}
				else
				{
					//if the getting the camera was successful attach it to the NetStream
					ns.attachCamera(camera); 
				}
				
				//check and make sure that we have a mic
				mic = Microphone.getMicrophone();
				
				//If attaching a microphone was unsuccessful...
				if ( mic == null )
				{
					if ( Microphone.names.length > 0 )
					{
						tracePanel.writeln( 'The default microphone is in use by another application.' );
					}
					else
					{
						tracePanel.writeln( 'There is no microphone installed on your system.' );
					}
				}
				else
				{
					//if the getting the microphone was successful attach it to the NetStream
					ns.attachAudio(mic);
				}
				
				//we need a video to at least play, so at least a camera
				//must be attached.
				if ( camera )
				{			
					//If camera is present, publish the Netstream with the userUID and a type of "record"
					ns.publish( userUID, "record" );
					
					//Attach the video being recorded by the camera to the VideoDisplay component
					localVideo.attachCamera(camera);
					
					//Remove the TIMER_COMPLETE listener if recordingTimer already exists, this will prevent the listener
					//from firing while we are resetting the timer.
					if ( recordingTimer )
					{
						recordingTimer.removeEventListener( TimerEvent.TIMER_COMPLETE, handlerTimerEnd );
					}
					
					//Setting up a new timer with 600000 millisecond delay, then adding back the TIMER_COMPLETE
					//listener and starting the timer.  The timer should stop the videa when TIMER_COMPLETE is fired.
					recordingTimer = new Timer( 600000 );
					recordingTimer.addEventListener( TimerEvent.TIMER_COMPLETE, handlerTimerEnd, false, 0, true );
					recordingTimer.start();
					
					return true;
				}
				else
				{
					
					//If no camera was attached (or just a mic) then close the
					//NetConnection
					ns.close();
					
					//clearing the memory for the NetStream
					ns = null;
					return false;
				}
			}
			
			private function handlerTimerEnd( event:TimerEvent ):void
			{
				//calling close() to stop the NetStream since time is up
				close();
			}
			
			private function doStopRecording() : void
			{
				recordingTimer.stop();
				close();
			}
			
			private function close():void
			{
				//Closing the NetStream and removing the attached Camera
				//The button states are being reset to start recording over again
				ns.close();
				localVideo.attachCamera(null);
				
				btnStart.enabled = true;
				btnEnd.enabled = false;
				btnPlay.enabled = true;
				
				tracePanel.writeln( "Recording Stopped" );	
			}
			
			private function doPlayRecording():void
			{
				//Attaching the NetStream and playing back the recorded video
				//found under the userUID
				networkVideo.attachNetStream( ns );
				ns.play( userUID );
				
				tracePanel.writeln( "Playing Recorded Stream" );
			}
			
			//callback from fms
			public function handlerResult( result:String ) : void
			{
			}
			
			public function cleanUp() : void
			{
				nc.call( 'cleanUp', new Responder( handlerResult ) );
				nc.close();	
			}
			
		]]>
	</mx:Script>
	
	<mx:VDividedBox width="100%" height="100%">
		
		<mx:HBox width="100%" height="70%">
			
			<components:VideoPod id="recordingPod" width="{recordingPod.height}" height="100%"
								 maxWidth="300" maxHeight="300" title="Recording">
				
				<!--The VideoDisplay that shows the video that you're recording locally-->
				<mx:VideoDisplay id="localVideo" width="100%" height="100%" live="true"
								 styleName="horzCent0"/>
				
				<mx:ControlBar width="100%" styleName="horzAlignCntr">
					
					<mx:Button id="btnStart" label="Record" click="doStartRecording()"
							   styleName="recordButton" toolTip="Start Recording"/>
					
					<mx:Button id="btnEnd" label="Stop" click="doStopRecording()" enabled="false"
							   styleName="stopButton" toolTip="End Recording"/>
					
				</mx:ControlBar>
				
			</components:VideoPod>
			
			<components:VideoPod id="playbackPod" width="{playbackPod.height}" height="100%"
								 maxWidth="300" maxHeight="300" title="Playback">
				
				<!--The Display that shows the recorded video from the server-->
				<components:VideoSeekPlayback id="networkVideo" width="100%" height="100%"
											  showSeek="false" styleName="horzCent0"/>
				
				<mx:ControlBar width="100%" styleName="horzAlignCntr">
					
					<mx:Button id="btnPlay" label="{btnPlay.selected?'Stop':'Play'}"
							   click="doPlayRecording()" enabled="false" styleName="playStopButton"
							   toggle="true" toolTip="{btnPlay.selected?'Stop':'Play'}"/>
					
				</mx:ControlBar>
				
			</components:VideoPod>
			
		</mx:HBox>
		
		<!--The output panel for all the traced actions performed-->
		<components:TracePanel id="tracePanel" width="100%" height="30%"/>
		
	</mx:VDividedBox>
	
</mx:Application>