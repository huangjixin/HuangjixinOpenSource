<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:graphic="com.hjx.graphic.*"
			   xmlns:local="*"
			   xmlns:diagram="com.hjx.diagram.*"
			   xmlns:editor="com.hjx.diagram.editor.*"
			   xmlns:graphlayout="com.hjx.graphic.graphlayout.*"
			   minWidth="955" minHeight="600"
			   creationComplete="application1_creationCompleteHandler(event)">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace graphic "com.hjx.graphic.*";
		@namespace local "*";
		@namespace diagram "com.hjx.diagram.*";
		@namespace editor "com.hjx.diagram.editor.*";
		@namespace graphlayout "com.hjx.graphic.graphlayout.*";
		graphic|Node{
			skinClass:ClassReference("com.hjx.graphic.skin.NodeSkin");
			adornerClass:ClassReference("com.hjx.diagram.editor.NodeAdorner")
		}
		
		editor|NodeAdorner{
			skinClass:ClassReference("com.hjx.diagram.editor.skin.NodeAdornerSkin")
		}
		
		local|BPMNBtn{
			skinClass:ClassReference("skins.BPMNBtnSkin");
			adornerClass:ClassReference("com.hjx.diagram.editor.NodeAdorner")	
		}
		
		graphic|SubGraph{
			skinClass:ClassReference("com.hjx.graphic.skin.SubGraphSkin")
		}
		
		editor|DiagramEditor{
			skinClass:ClassReference("com.hjx.diagram.editor.skin.DiagramEditorSkin")
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.hjx.graphic.Node;
			import com.hjx.graphic.Renderer;
			import com.hjx.uitls.CloneUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.HierarchicalData;
			import mx.core.IVisualElementContainer;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			
			[Bindable]
			private var hac:ArrayCollection = new ArrayCollection([{nodeType:"graph",label:"root",children:[{nodeType:"node",label:"node0",x:0,y:0},{nodeType:"node",label:"node1",x:50,y:100}]}]);
			
			protected function node1_clickHandler(event:MouseEvent):void
			{
				if(node.selectable){
					node.selected = !node.selected;
					var renderer:Renderer = subGraph0.clone();
					IVisualElementContainer(subGraph0.parent).addElementAt(renderer,0);
					renderer.x=renderer.width+renderer.x;
					renderer.y=renderer.height+renderer.y;
//					node.width+=10;
//					node.height+=10;
//					node.invalidateLinkShape();
//					node.base.dispatchEvent(new MoveEvent(MoveEvent.MOVE));
//					link0.setStyle("startArrowVisible",node.selected);
//					link.setStyle("startArrowVisible",node.selected);
//					link0.setStyle("endArrowVisible",node.selected);
//					link.setStyle("endArrowVisible",node.selected);
				}
			}
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				this.addEventListener(MouseEvent.MOUSE_MOVE, onMoveHandler);
				node.addEventListener(MouseEvent.MOUSE_DOWN,onNodeMouseDown);
				node2.addEventListener(MouseEvent.MOUSE_DOWN,onNodeMouseDown);
				subGraph1.addEventListener(MouseEvent.MOUSE_DOWN,onNodeMouseDown);
				subGraph0.addEventListener(MouseEvent.MOUSE_DOWN,onNodeMouseDown);
//				trace(link.width+","+link.height);
			}
			
			protected function onMoveHandler(event:MouseEvent):void
			{
				var currentObject:Object = graph.getHitRenderer(event.target);
				if(currentObject){
//					trace(currentObject["id"]);
				}
				
			}
			
			protected function onNodeMouseDown(event:MouseEvent):void
			{
				event.stopPropagation();
				var ui:UIComponent = event.currentTarget as UIComponent;
				ui.startDrag();
				ui.addEventListener(MouseEvent.MOUSE_UP,onNodeMouseUp);
				ui.addEventListener(MouseEvent.MOUSE_MOVE,onNodeMouseMove);
			}
			
			protected function onNodeMouseUp(event:MouseEvent):void
			{
				var ui:UIComponent = event.currentTarget as UIComponent;
				ui.stopDrag();
				ui.removeEventListener(MouseEvent.MOUSE_UP,onNodeMouseUp);
				ui.removeEventListener(MouseEvent.MOUSE_MOVE,onNodeMouseMove);
				
				var rect:Rectangle = ui.getBounds(diagramEditor.grid.parent);
				var gridRect:Rectangle = new Rectangle(diagramEditor.grid.x,diagramEditor.grid.y,diagramEditor.grid.width,diagramEditor.grid.height);
				if(gridRect.intersects(rect)){
					var step:Number = diagramEditor.grid.step;
					/* step /=2; */
					var modeX:Number = rect.x % step;
					var modeY:Number = rect.y % step;
					if(modeX < step/2){
						ui.x-=modeX;
					}else if(modeX > step/2){
						ui.x += step - modeX;
					}
					
					if(modeY < step/2){
						ui.y-=modeY;
					}else if(modeY > step/2){
						ui.y += step - modeY;
					}
				}
			}
			
			protected function onNodeMouseMove(event:MouseEvent):void
			{
				var ui:UIComponent = event.currentTarget as UIComponent;
				var node:Node = null;
				if(event.currentTarget is Node){
					node = event.currentTarget as Node;
					node.invalidateLinkShape();
//					node.refresh();
				}
				
			}
			
			protected function diagramEditor_clickHandler(event:MouseEvent):void
			{
				if(!diagramEditor.grid){
					return;
				}
				
				if(diagramEditor.grid.type == "dot"){
					diagramEditor.grid.type = "line";
				}else if(diagramEditor.grid.type == "line"){
					diagramEditor.grid.type = "none";
				}else if(diagramEditor.grid.type == "none"){
					diagramEditor.grid.type = "dot";
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:XML id="data">
			<graph label="root">  
				<node x="50" y="50" label="Node 1"/>
				<node x="50" y="200" label="Node 2"/>
				<node x="50" y="120" label="Node 3"/>
				<graph x="200" y="50" label="Graph 1">
					<node x="10" y="0" label="Node 11"/>
					<node x="10" y="50" label="Node 12"/>
					<graph x="100" y="60" label="Graph 2">
						<node x="0" y="0" label="Node 21"/>
						<node x="60" y="60" label="Node 22"/>
					</graph>  
				</graph>
			</graph>
		</fx:XML>
		<mx:HierarchicalCollectionView id="hcv" showRoot="false"
									   source="{new HierarchicalData(data)}"/>
	</fx:Declarations>
	<editor:DiagramEditor id="diagramEditor" width="50%" height="50%" top="20" left="20" click="diagramEditor_clickHandler(event)">
		<diagram:Diagram id="diagram1" width="100%" height="100%" automaticGraphLayout="false"
						 labelField="@label" nodeDataProvider="{hcv}" selectionMode="multiple"
						 xLocationField="@x" yLocationField="@y">
			<!--<diagram:nodeLayout>
				<graphlayout:HierarchicalLayout id="hierarchicalLayout" flowDirection="right"/>
			</diagram:nodeLayout>-->
		</diagram:Diagram>
	</editor:DiagramEditor>
	<!--<diagram:Diagram id="diagram" width="100%" height="100%"/>-->
	<graphic:Graph id="graph" x="{width/2}" width="50%" height="100%">
		<graphic:SubGraph id="subGraph0" y="200" width="200" height="200">
			<graphic:SubGraph id="subGraph1" y="200" width="200" height="200">
				<local:BPMNBtn id="node" x="10" y="20" label="node2"/>
				<!--<local:BPMNBtn id="node3" x="50" y="100" label="node3"/>-->
			</graphic:SubGraph>
		</graphic:SubGraph>
		<graphic:Link id="link" endArrowVisible="true" endNode="{node2}" startArrowVisible="false" 
					  startNode="{node}" strokeWidth="2"/>
		<local:BPMNBtn id="node2" x="300" y="400"
					   click="node1_clickHandler(event)"/>
		<!--<local:BPMNBtn id="node4" x="500" y="200"/>-->
		
	</graphic:Graph>
</s:Application>
