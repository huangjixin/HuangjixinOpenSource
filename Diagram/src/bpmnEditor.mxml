<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:graphic="com.hjx.graphic.*"
			   xmlns:local="*"
			   xmlns:diagram="com.hjx.diagram.*"
			   xmlns:editor="com.hjx.diagram.editor.*"
			   xmlns:graphlayout="com.hjx.graphic.graphlayout.*"
			   xmlns:graphic1="com.hjx.bpmn.graphic.*"
			   minWidth="955" minHeight="600">
	<fx:Style source="bpmgraphic.css">
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.hjx.bpmn.graphic.ConnectingObject;
			import com.hjx.bpmn.graphic.LaneBase;
			import com.hjx.bpmn.graphic.VerticalLane;
			import com.hjx.diagram.serialization.XMLSerializer;
			import com.hjx.graphic.Graph;
			import com.hjx.graphic.Link;
			import com.hjx.graphic.LinkConnectionArea;
			import com.hjx.graphic.Node;
			import com.hjx.graphic.Renderer;
			import com.hjx.graphic.SubGraph;
			import com.hjx.jbpm.JbpmBase;
			import com.hjx.uitls.CloneUtil;
			
			import flash.globalization.NumberFormatter;
			
			import mx.collections.ArrayCollection;
			import mx.collections.HierarchicalData;
			import mx.controls.Alert;
			import mx.core.IVisualElementContainer;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			import mx.utils.ObjectUtil;
			
			import spark.effects.Resize;
			import spark.formatters.NumberFormatter;
			
			private var file:FileReference;
			private var currentFileName:String;
			// -----------------------------------------
			// 保存和加载
			// -----------------------------------------
			private var isModified:Boolean;
			
			private function saveXML() : void 
			{
				file = new FileReference();
				var xml:XML = new XMLSerializer().serialize(diagramEditor.graph, "diagram");
				var fileName:String = currentFileName;
				if(fileName == null)
					fileName = "新建流程";
				file.addEventListener(flash.events.Event.COMPLETE, fileSaved);
				file.addEventListener(flash.events.IOErrorEvent.IO_ERROR, ioError);
				file.save(xml, fileName);
			}
			
			private function fileSaved(event:flash.events.Event) : void 
			{
				if(file != null){
					currentFileName = file.name;
					isModified = false;
					
					file = null;
				}
			}
			
			private function loadXML() : void 
			{
				if(isModified){
					Alert.show("流程没有保存哦","",
						Alert.YES|Alert.NO, this, loadAlertCloseHandler, null, Alert.NO);
				} else {
					doLoadXML();
				}
			}
			
			private function loadAlertCloseHandler(event:CloseEvent) : void 
			{
				if(event.detail == Alert.YES)
					doLoadXML();
			}
			
			private function doLoadXML(): void
			{
				file = new FileReference();
				file.addEventListener(flash.events.Event.SELECT, fileSelectedForLoad);
				file.browse();
			}
			
			private function fileSelectedForLoad(event:flash.events.Event) : void 
			{
				if(file != null){
					file.addEventListener(flash.events.Event.COMPLETE, fileLoaded);
					file.addEventListener(flash.events.IOErrorEvent.IO_ERROR, ioError);
					file.load();
				}
			}
			
			private function fileLoaded(event:flash.events.Event) : void 
			{
				if(file != null){
					try {
						var xml:XML = new XML(file.data.toString());
						if(xml.localName() != "diagram"){
							Alert.show("该文件不是流程文件");
							return;
						}
						diagramEditor.clear();
						new XMLSerializer().deserialize(diagramEditor.graph, xml);
						currentFileName = file.name;
						isModified = false;
//						undoManager.clearUndo();
					} catch(err:Error){
						Alert.show(err.message);
					}
					file = null;
				}
			}    
			
			private function ioError(event:IOErrorEvent) : void 
			{
				var msg:String = event.text;
				var title:String = "出错";
				Alert.show(msg, title, Alert.OK|Alert.CANCEL, null, ioErrorAlertHandler);
			}
			
			private function ioErrorAlertHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.OK)
					saveXML();        
			}
			//-------------------------------------------------------------------------------------------
			// 克隆函数。
			//-------------------------------------------------------------------------------------------
			private function cloneFunction(obj:Renderer, clone:Renderer, playResize:Boolean = false) : void 
			{
				var resize:Resize = new Resize(clone);
					/* if(clone is SubProcess){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.subprocess.drop.width");
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.subprocess.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.HPool){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.hpool.drop.width");
					} else if(clone is com.ibm.ilog.elixir.diagram.HLane){
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.hlane.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.VPool){
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.vpool.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.VLane){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.vlane.drop.width");
					} else if(clone is bpm.graphic.ConnectingObject){
						bpm.graphic.ConnectingObject(clone).label = "";
					} else if(clone is bpm.graphic.Group){
						bpm.graphic.Group(clone).clickableInside = false;
					} */
					if(clone is HorizontalPool){
						if (playResize) 
						{
							resize.widthTo = 500;	
							resize.play();
						}
						else 
							clone.width = 500;	
						
					} else if(clone is VerticalPool){
						if (playResize) 
						{
							resize.heightTo = 500;	
							resize.play();
						}
						else 
							clone.height = 500;
					} else if(clone is SubProcess){
						if (playResize) 
						{
							resize.widthTo = 200;	
							resize.heightTo = 200;	
							resize.play();
						}
						else {
							clone.height = 200;
							clone.width = 200;						
						}
					}else if(clone is HorizontalLane){
						if (playResize) 
						{
							resize.widthTo = 480;	
							resize.play();
						}
						else {
							clone.width = 480;					
						}
					}else if(clone is VerticalLane){
						if (playResize) 
						{
							resize.heightTo = 480;	
							resize.play();
						}
						else {
							clone.height = 480;					
						}
					}
				
				
				/* if(clone is SubProcess){
					if(SubProcess(obj).nodeLayout != null)
						SubProcess(clone).nodeLayout = SubProcess(obj).nodeLayout.copy();
				}   */             
			}
			
			protected function setProBtn_clickHandler(event:MouseEvent):void
			{
				var selObjs:Vector.<Renderer>  = diagramEditor.getSelectedObjects();
				if(selObjs.length>0){
					for each (var renderer:Renderer in selObjs) 
					{
						if(renderer is Task){
							var task:Task = renderer as Task;
							task.task.commonNodeElements.name = "commonNodeElements";
						}
					}
					
				}
			}
			
			protected function getJbpmBtn_clickHandler(event:MouseEvent):void
			{
				var xml:XML = serialize(diagramEditor.graph, "process-denifition");
			}
			
			private var excluded:Dictionary = new Dictionary();
			private var xml:XML = new XML(<process-denifition/>);
			
			public function serialize(object:Object, rootTag:String, childrenOnly:Boolean = true) : XML
			{
				var root:XML = new XML("<"+rootTag+"></"+rootTag+">");
				
				if(childrenOnly){
					serializeChildren(object, root, root);
				} else {
					var child:XML = serializeObject(object, root);
					if(child != null)
						root.appendChild(child);
				}
				return root;
			}
			
			protected function serializeObject(object:Object, root:XML) : XML
			{
				var options:Object = new Object();
				options["includeReadOnly"] = false;
				
				var excludes:Array = excluded[className] as Array;
				if(excludes == null){
					excludes = getExcludedProperties(object);
					excluded[className] = excludes;
				}
				
				var classInfo:Object = mx.utils.ObjectUtil.getClassInfo(object, excludes, options);
				var properties:Array = classInfo["properties"];
				
				for each(var property:QName in properties){
					var propertyName:String = property.localName;
					try {
						var v:Object = object[propertyName];
						if(v is JbpmBase){
							var proXml:XML = JbpmBase(v).toXml();
							trace(proXml.toString());
						}
						var sv:Object = serializeProperty(object, propertyName, v, null, root);
						if(sv is XML)
							root.appendChild(sv);
						else if(sv is String)
							root.@[propertyName] = sv;
					} catch(err:Error){
						// ignore property
					}
				}
				
//				serializeChildren(object, root, root);
				
				return root;
			}
			
			protected function getExcludedProperties(object:Object) : Array
			{
				if(object is Renderer)
					return getRendererProperties();
				else
					return new Array();
			}
			
			private var rendererProperties:Array = null;
			
			private function getRendererProperties() : Array 
			{
				if(rendererProperties == null){
					rendererProperties = new Array();
					for each(var name:QName in ObjectUtil.getClassInfo(new Renderer())["properties"]){
						var pname:String = name.localName;
						if(pname != "left" &&
							pname != "top" &&
							pname != "x" &&
							pname != "y" &&
							pname != "width" &&
							pname != "height")
							rendererProperties.push(pname);
					}
				}
				return rendererProperties;
			}
			
			protected function serializeProperty(object:Object, name:String, value:Object, defaultValue:Object, root:XML) : Object
			{
				if ((value is JbpmBase)) {
					var propertyEleXml:XML = serializePropertyAsElement(name, value, root);
					return propertyEleXml;
				}
				
				if(value is String) {
					var propXML:XML = new XML("<"+name+"></"+name+">");
					propXML.appendChild(String(value));
					return propXML;
				}
				if(value is int || value is Boolean)
					return value.toString();
				
				if(value is Number && !isNaN(Number(value))){
					//return Number(value).toFixed();
					return ""+value;
				}
				
				return null;
			}
			
			protected function serializePropertyAsElement(name:String, value:Object, root:XML) : XML
			{
				var propXML:XML = new XML("<"+name+"></"+name+">");
				var valueXML:XML = serializeObject(value, root);
				if(valueXML != null){
					propXML.appendChild(valueXML);
					return propXML;
				} else {
					return null;
				}
			}
			
			private function serializeChildren(object:Object, parent:XML, root:XML) : void
			{
				var children:Array = getChildrenToSerialize(object);
				if(children != null){
					for each(var childObject:Object in children)
					{
						var child:XML = serializeObject(childObject, root);
						if(child != null)
							parent.appendChild(child);
					}
				}
			}
			
			protected function getChildrenToSerialize(object:Object) : Array
			{
				var graph:Graph = getGraph(object);
				if(graph != null){
					var children:Array = new Array();
					for(var i:int = 0; i < graph.numElements; i++)
						children.push(graph.getElementAt(i));
					return children;
				}
				return null;
			}
			
			private function getGraph(object:Object) : Graph
			{
				if(object is Graph)
					return Graph(object);
				if(object is com.hjx.diagram.Diagram)
					return com.hjx.diagram.Diagram(object).graph;
				if(object is SubGraph){
					SubGraph(object).validateNow();
					return SubGraph(object).graph;
				}
				return null;
			}
			
			private function serialChildren():void
			{
				
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--<fx:XML id="data">
			<Diagram xmlns:chg="com.hjx.graphic"
					 xmlns:chbg="com.hjx.bpmn.graphic"
					 xmlns:fg="flash.geom">  
				<chbg:Task id="task1" x="50" y="50" label="任务1"/>
				<chbg:Task id="task2" x="50" y="200" label="任务2"/>
				<chbg:StartEvent x="50" y="320" label="开始"/>
				<chbg:EndEvent x="50" y="370" label="结束"/>
				<chbg:Gateway x="50" y="420" label="网关"/>
				<chbg:TextAnnotation x="160" y="420" label="左注解"/>
				<chg:Link>
					<fallbackEndPoint>
						<fg:Point id="point5" x="600" y="400"/>
					</fallbackEndPoint>
					<fallbackStartPoint>
						<fg:Point id="point6" x="250" y="500"/>
					</fallbackStartPoint>
				</chg:Link>
					
				<chg:SubGraph x="200" y="50" width="200" height="200" label="Graph 1">
					<chbg:Task id="task3" x="10" y="0" label="任务3"/>
					<chbg:Task x="10" y="50" label="Node 12"/>
					<chg:SubGraph x="100" y="60" width="200" height="200" label="Graph 2">
						<chbg:Task x="0" y="0" label="Node 21"/>
						<chbg:Task x="60" y="60" label="Node 22"/>
					</chg:SubGraph>  
				</chg:SubGraph>
				<chg:Link endNode="task2" startNode="task1">
				</chg:Link>
			</Diagram>
		</fx:XML>
		<mx:HierarchicalCollectionView xmlns:chg="com.hjx.graphic"
									   xmlns:chbg="com.hjx.bpmn.graphic"
									   xmlns:chg="com.hjx.graphic"
									   id="hcv" showRoot="false"
									   source="{new HierarchicalData(data)}"/>-->
	</fx:Declarations>
	<mx:HDividedBox xmlns:chg="com.hjx.graphic"
					xmlns:chbg="com.hjx.bpmn.graphic"
					width="100%" height="100%">
		<s:Panel width="200" height="100%" title="图形面板">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingTop="10">
				<s:ButtonBar dataProvider="{rendererView}" skinClass="skins.BtnBarSkin">
					<s:layout>
						<s:VerticalLayout rowHeight="50" gap="0" paddingLeft="0" paddingRight="0"/>
					</s:layout>
				</s:ButtonBar>
				
				<!--<s:TabBar width="100%" dataProvider="{rendererView}"/>-->
				<mx:ViewStack id="rendererView" width="100%" height="100%" creationPolicy="all">
					<s:NavigatorContent width="100%" height="100%" label="任务"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:Task label="任务"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Task label="任务" loop="true"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Task label="任务" compensation="true"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Task label="任务" multiInstance="true"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
						
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="开始事件"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Message"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Timer"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Error"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Compensation"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Rule"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:StartEvent label="开始" trigger="Multiple"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="结束事件"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Message"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Timer"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Error"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Compensation"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Rule"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束" trigger="Multiple"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="网关"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:Gateway label="网关"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Gateway label="网关" gatewayType="AND"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Gateway label="网关" gatewayType="OR"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Gateway label="网关" gatewayType="Complex"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="子流程"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:SubProcess width="120" height="120" label="子流程"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:SubProcess width="120" height="120" label="子流程"
													 adHoc="true"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="甬道池"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:HorizontalPool width="120" height="120" label="横甬道池">
									<!--<graphic1:HorizontalLane width="100%" height="60" label="横甬道">
									</graphic1:HorizontalLane>
									<graphic1:HorizontalLane width="100%" height="60" y="60" label="横甬道">
									</graphic1:HorizontalLane>-->
								</graphic1:HorizontalPool>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:VerticalPool width="120" height="120" label="竖甬道池">
									<!--<graphic1:VerticalLane width="60" height="100%" label="竖甬道">
									</graphic1:VerticalLane>
									<graphic1:VerticalLane width="60" x="60" height="100%" label="竖甬道">
									</graphic1:VerticalLane>-->
								</graphic1:VerticalPool>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:HorizontalLane width="120" height="120" label="横甬道">
								</graphic1:HorizontalLane>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:VerticalLane width="120" height="120" label="竖甬道">
								</graphic1:VerticalLane>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="注释"
										backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:DataObject label="注释"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Group label="注释"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:TextAnnotation label="注释"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					
					<s:NavigatorContent width="100%" height="100%" label="连线"
										backgroundColor="#EEF0F3">
						<s:List id="linkList" width="100%" height="100%"
								change="diagramEditor.linkPrototype = IList(linkList.dataProvider).getItemAt(event.newIndex) as Link;"
								selectedIndex="0">
							<s:itemRenderer>
								<fx:Component>
									<s:ItemRenderer height="30">
										<s:states>
											<s:State name="normal"/>
											<s:State name="hovered"/>
											<s:State name="selected"/>
										</s:states>
										<s:Rect left="0" right="0" top="0" bottom="0">
											<s:fill>
												<s:SolidColor alpha="0" color="0x999999"
															  alpha.hovered="0.2"
															  alpha.selected="0.6"/>
											</s:fill>
										</s:Rect>
										<editor:DiagramPalette data="{data}"/>
									</s:ItemRenderer>
								</fx:Component>
							</s:itemRenderer>
							<s:dataProvider>
								<s:ArrayList>
									<graphic1:SequenceFlow label="时序流"
													  fallbackEndPoint="{new Point(170,10)}"
													  fallbackStartPoint="{new Point(10,10)}"/>
									<graphic1:MessageFlow label="消息流"
													 fallbackEndPoint="{new Point(170,10)}"
													 fallbackStartPoint="{new Point(10,10)}"/>
									<graphic1:Association label="关联"
													 fallbackEndPoint="{new Point(170,10)}"
													 fallbackStartPoint="{new Point(10,10)}"/>
								</s:ArrayList>
							</s:dataProvider>
						</s:List>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
		</s:Panel>
		<s:VGroup width="100%" height="100%">
			<s:VGroup width="100%" paddingBottom="5" paddingTop="5">
				<s:HGroup>
					<s:Button label="保存" click="saveXML();"/>
					<s:Button label="打开" click="loadXML();"/>
					<s:Button label="连线" click="diagramEditor.connectNodes(LinkConnectionArea.TOP,LinkConnectionArea.BOTTOM);"/>
					<s:Button id="setProBtn" label="设置属性" click="setProBtn_clickHandler(event)"/>
					<s:Button id="getJbpmBtn" label="抽取jbpm文件" click="getJbpmBtn_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
			<s:Panel width="100%" height="100%">
				<editor:DiagramEditor xmlns:chg="com.hjx.graphic"
									  id="diagramEditor" width="100%" height="100%"
									  cloneFunction="cloneFunction">
					<diagram:Diagram id="diagram1" width="100%" height="100%"
									 automaticGraphLayout="false" labelField="@label"
									 selectionMode="multiple" xLocationField="@x"
									 yLocationField="@y">
						<!--<diagram:nodeLayout>
						<graphlayout:HierarchicalLayout id="hierarchicalLayout" flowDirection="right"/>
						</diagram:nodeLayout>-->
					</diagram:Diagram>
				</editor:DiagramEditor>
			</s:Panel>		
		</s:VGroup>
	</mx:HDividedBox>
	
	<!--<diagram:Diagram id="diagram" width="100%" height="100%"/>-->
	<!--<graphic:Graph id="graph" x="{width/2}" width="50%" height="100%"
				   mouseDown="graph_mouseDownHandler(event)">
		<graphic:SubGraph id="subGraph0" y="200" width="200" height="200">
			<graphic:SubGraph id="subGraph1" width="200" height="200">
				<graphic1:Task id="node" x="10" y="20" label="node2"/>
			</graphic:SubGraph>
		</graphic:SubGraph>
		<graphic1:Task id="node2" x="300" y="400" click="node1_clickHandler(event)"/>
		
		<graphic1:IntermediateEvent id="intermediateEvent" x="500" y="490"/>
		
		<graphic1:Group id="group" x="500" y="590" width="100" height="50"/>
		
		<graphic1:DataObject id="dataObject" x="500" y="690"/>
		<graphic:Link endNode="{task}" startNode="{startEvent}"/>
		<graphic1:Task id="task" x="100" y="20" label="申请部门活动" click="diagramEditor.connectNodes()"/>
		<graphic:Link endNode="{endEvent}" startNode="{task}"/>
		
		<graphic1:Gateway id="gateway" x="500" y="390"/>
		<graphic1:MessageFlow id="sequenceFlow" startArrowVisible="false"
							   endArrowVisible="true"
							   fallbackStartPoint="{new Point(100,100)}" fallbackEndPoint="{new Point(400,400)}"/>
		
	</graphic:Graph>-->
</s:Application>
