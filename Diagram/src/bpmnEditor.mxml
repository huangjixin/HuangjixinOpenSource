<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:graphic="com.hjx.graphic.*"
			   xmlns:local="*"
			   xmlns:diagram="com.hjx.diagram.*"
			   xmlns:editor="com.hjx.diagram.editor.*"
			   xmlns:graphlayout="com.hjx.graphic.graphlayout.*"
			   xmlns:graphic1="com.hjx.bpmn.graphic.*"
			   minWidth="955" minHeight="600"
			   creationComplete="application1_creationCompleteHandler(event)">
	<fx:Style source="bpmgraphic.css">
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.hjx.bpmn.graphic.ConnectingObject;
			import com.hjx.bpmn.graphic.LaneBase;
			import com.hjx.bpmn.graphic.VerticalLane;
			import com.hjx.graphic.Node;
			import com.hjx.graphic.Renderer;
			import com.hjx.uitls.CloneUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.HierarchicalData;
			import mx.core.IVisualElementContainer;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			
			[Bindable]
			private var hac:ArrayCollection = new ArrayCollection([{nodeType:"graph",label:"root",children:[{nodeType:"node",label:"node0",x:0,y:0},{nodeType:"node",label:"node1",x:50,y:100}]}]);
			
			protected function node1_clickHandler(event:MouseEvent):void
			{
//				if(node.selectable){
//					node.monitoringStatus = "active";
//					node2.monitoringStatus = "done";
//					
//					node.selected = !node.selected;
//					var renderer:Renderer = subGraph0.clone();
//					IVisualElementContainer(subGraph0.parent).addElementAt(renderer,0);
//					/* var cloneLink:Link = link.clone() as Link;
//					IVisualElementContainer(link.parent).addElementAt(cloneLink,0); */
//					/* renderer.x=renderer.width+renderer.x;
//					renderer.y=renderer.height+renderer.y; */
//					
////					node.width+=10;
////					node.height+=10;
////					node.invalidateLinkShape();
////					node.base.dispatchEvent(new MoveEvent(MoveEvent.MOVE));
////					link0.setStyle("startArrowVisible",node.selected);
////					link.setStyle("startArrowVisible",node.selected);
////					link0.setStyle("endArrowVisible",node.selected);
////					link.setStyle("endArrowVisible",node.selected);
//				}
			}
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
//				this.addEventListener(MouseEvent.MOUSE_MOVE, onMoveHandler);
//				node.addEventListener(MouseEvent.MOUSE_DOWN,onNodeMouseDown);
//				node2.addEventListener(MouseEvent.MOUSE_DOWN,onNodeMouseDown);
//				subGraph1.addEventListener(MouseEvent.MOUSE_DOWN,onNodeMouseDown);
//				subGraph0.addEventListener(MouseEvent.MOUSE_DOWN,onNodeMouseDown);
				
//				trace(this.diagramEditor.getBounds(this));
//				trace(this.diagramEditor.diagramParent.getBounds(this.diagramEditor));
//				trace(this.diagramEditor.);
//				trace(link.width+","+link.height);
			}
			
			protected function onMoveHandler(event:MouseEvent):void
			{
//				var currentObject:Object = graph.getHitRenderer(event.target);
//				if(currentObject){
////					trace(currentObject["id"]);
//				}
				
			}
			
			protected function onNodeMouseDown(event:MouseEvent):void
			{
				event.stopPropagation();
				var ui:UIComponent = event.currentTarget as UIComponent;
				ui.startDrag();
				ui.addEventListener(MouseEvent.MOUSE_UP,onNodeMouseUp);
				ui.addEventListener(MouseEvent.MOUSE_MOVE,onNodeMouseMove);
			}
			
			protected function onNodeMouseUp(event:MouseEvent):void
			{
				var ui:UIComponent = event.currentTarget as UIComponent;
				ui.stopDrag();
				ui.removeEventListener(MouseEvent.MOUSE_UP,onNodeMouseUp);
				ui.removeEventListener(MouseEvent.MOUSE_MOVE,onNodeMouseMove);
				
				var rect:Rectangle = ui.getBounds(diagramEditor.grid.parent);
				var gridRect:Rectangle = new Rectangle(diagramEditor.grid.x,diagramEditor.grid.y,diagramEditor.grid.width,diagramEditor.grid.height);
				if(gridRect.intersects(rect)){
					var step:Number = diagramEditor.grid.step;
					/* step /=2; */
					var modeX:Number = rect.x % step;
					var modeY:Number = rect.y % step;
					if(modeX < step/2){
						ui.x-=modeX;
					}else if(modeX > step/2){
						ui.x += step - modeX;
					}
					
					if(modeY < step/2){
						ui.y-=modeY;
					}else if(modeY > step/2){
						ui.y += step - modeY;
					}
				}
			}
			
			protected function onNodeMouseMove(event:MouseEvent):void
			{
				var ui:UIComponent = event.currentTarget as UIComponent;
				var node:Node = null;
				if(event.currentTarget is Node){
					node = event.currentTarget as Node;
					node.invalidateLinkShape();
//					node.refresh();
				}
				
			}
			
			protected function diagramEditor_clickHandler(event:MouseEvent):void
			{
				if(!diagramEditor.grid){
					return;
				}
				
				/* if(diagramEditor.grid.type == "dot"){
					diagramEditor.grid.type = "line";
				}else if(diagramEditor.grid.type == "line"){
					diagramEditor.grid.type = "none";
				}else if(diagramEditor.grid.type == "none"){
					diagramEditor.grid.type = "dot";
				} */
			}
			
			protected function graph_mouseDownHandler(event:MouseEvent):void
			{
//				var renderer:Renderer = DiagramEditor.getRenderer(event.target);
//				if(renderer){
//					if(renderer is Link){
//						if(renderer is ConnectingObject){
//							if(ConnectingObject(renderer).monitoringStatus == null){
//								ConnectingObject(renderer).monitoringStatus = "active"
//							}else if(ConnectingObject(renderer).monitoringStatus == "active"){
//								ConnectingObject(renderer).monitoringStatus = "done"
//							}else{
//								ConnectingObject(renderer).monitoringStatus = null
//							}
//						}
//						
//						if(Link(renderer).startNode || Link(renderer).endNode){
//							return;
//						}
//					}
//					if(renderer is HorizontalLane || renderer is VerticalLane ){
//						if(renderer is HorizontalPool ||renderer is VerticalPool ){
//						}else{
//							return;
//						}
//					}
//					renderer.startDrag();
//					renderer.addEventListener(MouseEvent.MOUSE_UP,onRendererMouseUp);
//					renderer.stage.addEventListener(MouseEvent.MOUSE_UP,onRendererMouseUp);
//					renderer.addEventListener(MouseEvent.MOUSE_MOVE,onRendererMouseMove);
//					renderer.stage.addEventListener(MouseEvent.MOUSE_MOVE,onRendererMouseMove);
//				}
			}
			
			protected function onRendererMouseUp(event:MouseEvent):void
			{
				var renderer:Renderer = event.currentTarget as Renderer;
				if(renderer){
					renderer.stopDrag();
				}
			}
			
			protected function onRendererMouseMove(event:MouseEvent):void
			{
				var renderer:Renderer = event.currentTarget as Renderer;
				if(renderer is Node){
					Node(renderer).invalidateLinkShape();
				}
			}
			
			private function cloneFunction(obj:Renderer, clone:Renderer, inCopyPaste:Boolean = false) : void 
			{
				if(!inCopyPaste){
					/* if(clone is SubProcess){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.subprocess.drop.width");
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.subprocess.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.HPool){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.hpool.drop.width");
					} else if(clone is com.ibm.ilog.elixir.diagram.HLane){
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.hlane.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.VPool){
						clone.height = resourceManager.getNumber("bpmeditor", "bpmeditor.vpool.drop.height");
					} else if(clone is com.ibm.ilog.elixir.diagram.VLane){
						clone.width = resourceManager.getNumber("bpmeditor", "bpmeditor.vlane.drop.width");
					} else if(clone is bpm.graphic.ConnectingObject){
						bpm.graphic.ConnectingObject(clone).label = "";
					} else if(clone is bpm.graphic.Group){
						bpm.graphic.Group(clone).clickableInside = false;
					} */
					if(clone is HorizontalPool){
						clone.width = 500;
					} else if(clone is VerticalPool){
						clone.height = 500;
					}
				}
				
				/* if(clone is SubProcess){
					if(SubProcess(obj).nodeLayout != null)
						SubProcess(clone).nodeLayout = SubProcess(obj).nodeLayout.copy();
				}   */             
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--<fx:XML id="data">
			<Diagram xmlns:chg="com.hjx.graphic"
					 xmlns:chbg="com.hjx.bpmn.graphic"
					 xmlns:fg="flash.geom">  
				<chbg:Task id="task1" x="50" y="50" label="任务1"/>
				<chbg:Task id="task2" x="50" y="200" label="任务2"/>
				<chbg:StartEvent x="50" y="320" label="开始"/>
				<chbg:EndEvent x="50" y="370" label="结束"/>
				<chbg:Gateway x="50" y="420" label="网关"/>
				<chbg:TextAnnotation x="160" y="420" label="左注解"/>
				<chg:Link>
					<fallbackEndPoint>
						<fg:Point id="point5" x="600" y="400"/>
					</fallbackEndPoint>
					<fallbackStartPoint>
						<fg:Point id="point6" x="250" y="500"/>
					</fallbackStartPoint>
				</chg:Link>
					
				<chg:SubGraph x="200" y="50" width="200" height="200" label="Graph 1">
					<chbg:Task id="task3" x="10" y="0" label="任务3"/>
					<chbg:Task x="10" y="50" label="Node 12"/>
					<chg:SubGraph x="100" y="60" width="200" height="200" label="Graph 2">
						<chbg:Task x="0" y="0" label="Node 21"/>
						<chbg:Task x="60" y="60" label="Node 22"/>
					</chg:SubGraph>  
				</chg:SubGraph>
				<chg:Link endNode="task2" startNode="task1">
				</chg:Link>
			</Diagram>
		</fx:XML>
		<mx:HierarchicalCollectionView xmlns:chg="com.hjx.graphic"
									   xmlns:chbg="com.hjx.bpmn.graphic"
									   xmlns:chg="com.hjx.graphic"
									   id="hcv" showRoot="false"
									   source="{new HierarchicalData(data)}"/>-->
	</fx:Declarations>
	<mx:HDividedBox xmlns:chg="com.hjx.graphic"
					xmlns:chbg="com.hjx.bpmn.graphic"
					width="100%" height="100%">
		<s:Panel width="200" height="100%" title="图形面板">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingTop="10">
				<s:ButtonBar dataProvider="{rendererView}">
					<s:layout>
						<s:VerticalLayout gap="0" paddingLeft="0" paddingRight="0"/>
					</s:layout>
				</s:ButtonBar>
				
				<!--<s:TabBar width="100%" dataProvider="{rendererView}"/>-->
				<mx:ViewStack id="rendererView" width="100%" height="100%">
					<s:NavigatorContent width="100%" height="100%" label="任务" backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:Task label="任务"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
						
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="开始事件"  backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:StartEvent id="startEvent" label="开始"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="结束事件"  backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:EndEvent label="结束"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="网关"  backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:Gateway label="网关"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="子流程"  backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:SubProcess label="子流程" width="120" height="120"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="甬道池"  backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:HorizontalPool width="120" height="120" label="横甬道池">
									<graphic1:HorizontalLane width="100%" height="50%" label="横甬道">
									</graphic1:HorizontalLane>
									<graphic1:HorizontalLane width="100%" height="50%" label="横甬道">
									</graphic1:HorizontalLane>
								</graphic1:HorizontalPool>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:VerticalPool width="120" height="120" label="竖甬道池">
									<graphic1:VerticalLane width="50%" height="100%" label="竖甬道">
									</graphic1:VerticalLane>
									<graphic1:VerticalLane width="50%" height="100%" label="竖甬道">
									</graphic1:VerticalLane>
								</graphic1:VerticalPool>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
					<s:NavigatorContent width="100%" height="100%" label="注释"  backgroundColor="#EEF0F3">
						<editor:DiagramPalette top="10" width="100%" height="100%">
							<editor:layout>
								<s:VerticalLayout horizontalAlign="center"/>
							</editor:layout>
							<editor:DiagramPalette>
								<graphic1:DataObject label="注释" />
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:Group label="注释"/>
							</editor:DiagramPalette>
							<editor:DiagramPalette>
								<graphic1:TextAnnotation label="注释"/>
							</editor:DiagramPalette>
						</editor:DiagramPalette>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
		</s:Panel>
		<s:VGroup  width="100%" height="100%">
			<s:VGroup  width="100%" paddingBottom="5" paddingTop="5">
				<s:HGroup>
					<s:Button label="保存"/>
				</s:HGroup>
			</s:VGroup>
			<s:Panel width="100%" height="100%">
				<editor:DiagramEditor xmlns:chg="com.hjx.graphic"
									  id="diagramEditor" width="100%" height="100%"
									  click="diagramEditor_clickHandler(event)"
									  cloneFunction="cloneFunction">
					<diagram:Diagram id="diagram1" width="100%" height="100%"
									 automaticGraphLayout="false" labelField="@label"
									 selectionMode="multiple"
									 xLocationField="@x" yLocationField="@y">
						<!--<diagram:nodeLayout>
						<graphlayout:HierarchicalLayout id="hierarchicalLayout" flowDirection="right"/>
						</diagram:nodeLayout>-->
					</diagram:Diagram>
				</editor:DiagramEditor>
			</s:Panel>		
		</s:VGroup>
	</mx:HDividedBox>
	
	<!--<diagram:Diagram id="diagram" width="100%" height="100%"/>-->
	<!--<graphic:Graph id="graph" x="{width/2}" width="50%" height="100%"
				   mouseDown="graph_mouseDownHandler(event)">
		<graphic:SubGraph id="subGraph0" y="200" width="200" height="200">
			<graphic:SubGraph id="subGraph1" width="200" height="200">
				<graphic1:Task id="node" x="10" y="20" label="node2"/>
			</graphic:SubGraph>
		</graphic:SubGraph>
		<graphic1:Task id="node2" x="300" y="400" click="node1_clickHandler(event)"/>
		
		<graphic1:IntermediateEvent id="intermediateEvent" x="500" y="490"/>
		
		<graphic1:Group id="group" x="500" y="590" width="100" height="50"/>
		
		<graphic1:DataObject id="dataObject" x="500" y="690"/>
		<graphic:Link endNode="{task}" startNode="{startEvent}"/>
		<graphic1:Task id="task" x="100" y="20" label="申请部门活动" click="diagramEditor.connectNodes()"/>
		<graphic:Link endNode="{endEvent}" startNode="{task}"/>
		
		<graphic1:Gateway id="gateway" x="500" y="390"/>
		<graphic1:MessageFlow id="sequenceFlow" startArrowVisible="false"
							   endArrowVisible="true"
							   fallbackStartPoint="{new Point(100,100)}" fallbackEndPoint="{new Point(400,400)}"/>
		
	</graphic:Graph>-->
</s:Application>
